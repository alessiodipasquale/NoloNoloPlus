openapi: 3.0.0
info:
  title: NoloNolo Plus API
  description: ""
  version: 1.0.0

paths:
  /users:
    get:
      description: returns list of users
      responses:
        200:
          description: array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      description: create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: hitchhiker42
                password:
                  type: string
                name:
                  type: string
                  example: Arthur
                surname:
                  type: string
                  example: Dent
      responses:
        204:
          description: user has been created

  /users/staff:
    get:
      description: returns list of users that are part of staff
      responses:
        200:
          description: list of users that are part of staff
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

  /users/managers:
    get:
      description: returns list of managers
      responses:
        200:
          description: list of managers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

  /users/employees:
    get:
      description: returns list of employees
      responses:
        200:
          description: list of employees
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

  /users/employees/revenues:
    get:
      description: returns list of objects containg employee and total revenue generated
      responses:
        200:
          description: list of objects containg employee and total revenue
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
                  total revenue:
                    type: number

  /users/employees/{id}/revenue:
    get:
      description: return revenue generated by employee
      responses:
        200:
          description: total revenue generated by employee
          content:
            application/json:
              schema:
                type: number
                minimum: 0

  /users/clients:
    get:
      description: returns list of clients
      responses:
        200:
          description: list of employees
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

  /users/clients/revenues:
    get:
      description: returns list of objects containg client and total revenue generated
      responses:
        200:
          description: list of objects containg client and total revenue
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
                  total revenue:
                    type: number

  /users/damage:
    get:
      description: returns list of objects containing user and total damage
      responses:
        200:
          description: list of employees
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
                  total damage:
                    type: number
                    minimum: 0

  /users/{id}:
    get:
      description: get user by id
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: returns user with corresponding id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

    put:
      description: edit user by id
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: "#/components/schemas/UserBody"
      responses:
        204:
          description: user edited successfully
        # 400:
        #   description: no user matching id

    delete:
      description: delete user by id
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        204:
          description: user deleted successfully
        400:
          description: no user matching id

  /users/{id}/rentals:
    get:
      description: returns list of rentals of matching user
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: list of rentals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Rental"

  /users/{id}/reviews:
    get:
      description: returns list of reviews of matching user
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: list of reviews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Review"

  /users/{id}/damage:
    get:
      description: returns total damage generated by the user
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: Total damage generated by the user
          content:
            application/json:
              schema:
                type: number
                minimum: 0

  /users/{id}/favorites:
    get:
      description: returns list of favorite items for matching user
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: list of favorite items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Item"

  /items:
    get:
      description: returns list of items
      responses:
        200:
          description: list of items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Item"
    post:
      description: create new item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: green lightsaber
                description:
                  type: string
                  example: the classic flavor of jedi weaponry
                standard price:
                  type: number
                  minimum: 0
                state:
                  $ref: "#/components/schemas/ItemState"
                category:
                  type: string
      responses:
        204:
          description: item created successfully
        400:
          description: parameters missing in body

  /items/{id}:
    get:
      description: return item by id
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: item matching id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"

    put:
      description: edit item
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: green lightsaber
                description:
                  type: string
                  example: the classic flavor of jedi weaponry
                standard price:
                  type: number
                  minimum: 0
                state:
                  $ref: "#/components/schemas/ItemState"
                category:
                  type: string
      responses:
        204:
          description: item edited succesfully

    delete:
      description: delete item matching id
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        204:
          description: item deleted succesfully

  /rentals:
    get:
      description: returns list of rentals
      responses:
        200:
          description: list of rentals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Rental"

    post:
      description: creates new rentals
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                startDate:
                  type: string
                endDate:
                  type: string
                userId:
                  type: string
                objectId:
                  type: string

      responses:
        204:
          description: rental created succesfully
        400:
          description: request body is incorrect

  /rentals/{id}:
    get:
      description: returns rental matching id
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: rental matching id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rental"

    put:
      description: edit rental matching id
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RentalBody"
      responses:
        204:
          description: rental edited successfully

    delete:
      description: delete rental matching id
      responses:
        204:
          description: rental deleted successfully
        400:
          description: rental not found

  /certifications:
    get:
      description: return list of certifications
      responses:
        200:
          description: list of certifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Certification"

    post:
      description: create new certification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                employeeId:
                  type: string
                rentalId:
                  type: string
                certificationType:
                  type: string
              required: [rentalId, certificateType]
      responses:
        204:
          description: certification created succesfully
        400:
          description: parameters missing from request body

  /certification/{id}:
    get:
      description: returns certificate matching id
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: certificate matching id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Certification"

    delete:
      description: deletes certificate matching id
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        204:
          description: certificate deleted successfully

  /properties:
    get:
      description: returns list of properties
      responses:
        200:
          description: list of properties
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Property"

    post:
      description: create new property
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required: [name]

      responses:
        204:
          description: property created successfully
        400:
          description: parameters missing from request body
        403:
          description: property already exists

  /properties/{id}:
    get:
      description: get property matching id
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: property matching id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Property"

    put:
      description: edit property matching id
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PropertyBody"
              not:
                type: "object"
                required:
                  - id
      responses:
        204:
          description: property edited successfully

  /categories:
    get:
      description: returns list of categories
      responses:
        200:
          description: list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"

    post:
      description: create new category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        204:
          description: category created
        403:
          description: category already exists
        400:
          description: parameters missing in request body

  /categories/{id}/:
    get:
      description: return category matching id
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: category matching id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"

    put:
      description: edit category matching id
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryBody"
      responses:
        204:
          description: category edited successfully

    delete:
      description: delete category matching id
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        204:
          description: category deleted successfully
        400:
          description: category does not exist

  /kits:
    get:
      description: returns list of kits
      responses:
        200:
          description: list of kits
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Kit"

    post:
      description: create new kit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Kit"
      responses:
        204:
          description: kit created successfully

  /kits/{id}:
    get:
      description: returns kit matching id
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: kit matching id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Kit"
    
    put:
      description: edit kit matching id
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KitBody"
      responses:
        204: 
          description: kit edited successfully

    delete:
      description: delete kit matching id
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        204:
          description: category deleted successfully
        400:
          description: kit does not exist

#this one should probably be a get with query params
  /kits/{id}/available:
    post:
      description: returns true if kit is available
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                startDate:
                  type: string
                endDate:
                  type: string
              required: [startDate, endDate]
      responses:  
        200: 
          description: true if kit is available
          content:
            application/json:
              schema:
                type: boolean
        400:
          description: dates or object id missing

  /kits/{id}/price:
    post:
      description: calculates price for kit
      parameters:                       
        - $ref: "#/components/parameters/id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                startDate:
                  type: string
                endDate:  
                  type: string
                userId: 
                  type: string
              required: [startDate, endDate]
      responses:
        200:
          description: returns receipt (list of strings) containg total and partial prices for every item 
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

                
        400:
          description: parameters missing from request body

        
  /kits/{id}/reviews:
    get:
      description: returns a list of reviews for kit
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: list of reviews
          content:  
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Review"

  /reviews:
    get:
      description: request list of reviews
      responses:
        200:
          description: list of reviews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Review"

    post:
      description: create a new review
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Review"
      responses:
        204:
          description: review already successfully
        400:
          description: parameters missing in request body

  /reviews/{id}:
    get:  
      description: return review matching id
      parameters:                       
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: review matching id
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Review'

    put:
      description: edit review matching id
      parameters:                       
        - $ref: "#/components/parameters/id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewBody"

      responses:
        204:
          description: review edited correctly

    delete:
      description: deletes review matching id
      parameters:                       
        - $ref: "#/components/parameters/id"

      responses:
        204:
          description: review edited correctly
        400:
          description: review does not exist

  /groups:
    get:
      description: returns list of groups
      responses:
        200:
          description: list of groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
    
    post:
      description: create a new group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
      responses:
        204:
          description: group created succesfully
        400:
          description: parameters missingin body

  /groups/{id}:
    get:
      description: returns group matching id
      parameters:                       
        - $ref: "#/components/parameters/id" 
      responses:
        200: 
          description: group matching id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"

    put:
      description: edit group matching id
      parameters:                       
        - $ref: "#/components/parameters/id" 
      requestBody:
       content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupBody"
      responses:
        204: 
          description: group edit succesfully
        400:
          description: paramters missing in body

    delete:
      description: deleted group matching id
      parameters:                       
        - $ref: "#/components/parameters/id" 
      responses:
        204: 
          description: group deleted succesfully
        400:
          description: group does not exist
          
      





      





components:
  schemas:
    id: 
      type: object
      properties:
        _id:
          type: string
          example: id1



    User:
      allOf:
        - $ref: "#/components/schemas/id"
        - $ref: "#/components/schemas/UserBody"

    UserBody:
      type: object
      properties:
        username:
          type: string
          example: hitchhiker42
        password:
          type: string
        name:
          type: string
          example: Arthur
        surname:
          type: string
          example: Dent
        fav payment method:
          type: string
          enum: [carta, alla consegna]
        address:
          type: string
        loyalty points:
          type: number
          minimum: 0
          format: integer
        last visit:
          type: string
        comments from officers:
          type: string
          example: bravo cliente
        fav categories:
          type: array
          items:
            type: string
          default: []
        fav items ids:
          type: string
        role:
          type: string
          enum: [cliente, funzionario, manager]
          default: cliente
        rentals:
          type: array
          items:
            type: string
        reviews:
          type: array
          items:
            type: string
        registration date:
          type: string
        certifications:
          type: array
          items:
            type: string
      required:
        - username
        - password
        - name
        - surname
        - role
        - registration date


    Rental:
      allOf:
        - $ref: "#/components/schemas/id"
        - $ref: "#/components/schemas/Rental"

    RentalBody:
      type: object
      properties:
        client id:
          type: string
        employee id:
          type: string
        item ids:
          type: array
          items:
            type: string
        kit id:
          type: string
        time in days:
          type: integer
        rental type:
          type: string
          enum: [prenotazione, istantaneo]
        rental target:
          type: string
          enum: [singolo, kit]
          default: singolo
        rental certification:
          description: attests that rental has started
          type: string
        return certification:
          description: attests that rental has finished and item has been returned
          type: string
        state:
          type: string
          enum:
            - in correso
            - terminata
            - futura
            - non completabile
        final price:
          type: number
        receipt:
          type: array
          items:
            type: string
        partial prices:
          type: array
          items:
            type: string
        notes:
          type: array
          items:
            type: string
        damage:
          type: number
          minimum: 0
      required:
        - _id
        - start date
        - end date
        - item id
        - rental type
        - rental target
        - state
        - receipt

    Review:
      allOf:
        - $ref: "#/components/schemas/id"
        - $ref: "#/components/schemas/ReviewBody"

    ReviewBody:
      type: object
      properties:
        stars:
          type: integer
          minimum: 0
          maximum: 5
          example: 3
        comment:
          type: string
        client id:
          type: string
        item id:
          type: string
      required: [_id, stars, client id, item id]

    Item:
      allOf:
        - $ref: "#/components/schemas/id"
        - $ref: "#/components/schemas/ItemBody"

    ItemBody:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        standard price:
          type: number
          minimum: 0
        group id:
          type: string
        img src:
          type: string
          default: https://adriaticaindustriale.it/wp-content/uploads/2020/02/not-found.png
        state:
          type: string
          enum:
            [
              "nuovo",
              "ottimo",
              "buono",
              "usurato",
              "molto usurato",
              "inutilizzabile",
            ]
        ever been rented:
          type: boolean
          default: false
        rental dates:
          type: array
          items:
            type: string
        available:
          type: boolean
          default: true
        rent count:
          type: integer
          minimum: 0
      required:
        - _id
        - name
        - description
        - standard price
        - category
        - state

    ItemState:
      type: string
      enum:
        [
          "nuovo",
          "ottimo",
          "buono",
          "usurato",
          "molto usurato",
          "inutilizzabile",
        ]

    Certification:
      allOf:
        - $ref: "#/components/schemas/id"
        - $ref: "#/components/schemas/CertificationBody"


    CertificationBody:
      type: object
      properties:
        rentaldId:
          type: string
        employeeId:
          type: string
        certificationType:
          type: string
          enum: [ritiro, consegna]
        certificationDate:
          type: string
        commentsFromEmployee:
          type: string
      required:
        - _id
        - rentalId
        - userId
        - certificationType

    Property:
      allOf:
        - $ref: "#/components/schemas/id"
        - $ref: "#/components/schemas/PropertyBody"

    PropertyBody:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        associatedValues:
          type: array
          items:
            type: string
      required: [_id, associatedValues]

    Category:
      allOf:
        - $ref: "#/components/schemas/id"
        - $ref: "#/components/schemas/CategoryBody"
    

    CategoryBody:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        associatedItems:
          type: array
          items:
            type: string
      required: [name, description]

    Kit:
      allOf:
        - $ref: "#/components/schemas/id"
        - $ref: "#/components/schemas/KitBody"

    KitBody:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        category:
          type: array
          items:
            type: string
        available:
          type: boolean
          default: true
        items:
          type: array
          items:
            type: string
        rentals:
          type: array
          items:
            type: string

    Group:
      allOf:
        - $ref: "#/components/schemas/id"
        - $ref: "#/components/schemas/GroupBody"

    GroupBody:
      type: object
      properties:
        _id:
          type: string
        items:
          type: array
          items:
            type: string
            default: []
        name:
          type: string
      required: [name]

  parameters:
    id:
      name: id
      in: path
      required: true
      schema:
        type: string
